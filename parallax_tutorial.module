<?php

/**
 * @file
 * Enable Parallax effect for any block created by the user.
 *
 * This module enables the user to select none, Same, or Opposite directions
 * when creating a block. Selecting Same or Opposite places a data attribute
 * which is ready by the attached javascript file, and then targeted for
 * calculations causing parallax effect based on 'same' or 'opposite' value.
 */

/**
 * Implements hook_form_alter().
 */
function parallax_tutorial_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == 'block_admin_configure') || ($form_id == 'block_add_block_form')) {
    $block = block_load($form['module']['#value'], $form['delta']['#value']);

    $form['settings']['parallax'] = array(
      '#type'         => 'fieldset',
      '#title'        => t('Parallax Settings'),
      '#collapsible'  => TRUE,
      '#collapsed'    => TRUE,
    );

    $form['settings']['parallax']['parallax_value'] = array(
      '#title'    => t('Parallax Direction'),
      '#type'     => 'select',
      '#options'  => array(
        'none' => t('None'),
        'top-to-bottom' => t('Move to bottom on scroll (fast effect)'),
        'bottom-to-top' => t('Move to top on scroll (slow effect)'),
      ),
      '#default_value' => isset($block->parallax_value) ? $block->parallax_value : 'none',
    );

    $form['settings']['parallax']['background_image'] = array(
      '#title'                => t('Background Image'),
      '#type'                 => 'managed_file',
      '#description'          => t('Replace all spaces in file name with dashes. Larger pictures are recommended.'),
      '#default_value'        => isset($block->background_image) ? $block->background_image : '',
      '#upload_location'      => 'public://parallax_block/',
      '#upload_validators'    => array(
        'file_validate_extensions' => array('gif png jpg jpeg'),
        'file_validate_size'  => array(2 * 1024 * 1024),
      ),
    );

    $form['#submit'][] = 'parallax_tutorial_form_submit';
  }
}

/**
 * Helper function: additional submit callback for block configuration pages.
 */
function parallax_tutorial_form_submit($form, &$form_state) {
  $curr_theme = $GLOBALS['conf']['theme_default'];

  if ($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') {

    $parallax_items = array(
      'parallax_value'   => $form_state['values']['parallax_value'],
      'background_image'          => $form_state['values']['background_image'],
    );

    if (parallax_block_updated_values($parallax_items, $form, $form_state)) {
      db_update('block')
        ->fields($parallax_items)
        ->condition('module', $form_state['values']['module'])
        ->condition('delta', $form_state['values']['delta'])
        ->condition('theme', $curr_theme)
        ->execute();

      if (module_exists('context')) {
        cache_clear_all('context', 'cache', TRUE);
      }
    }

    $image = file_load($form_values['background_image']);
    $image->status = FILE_STATUS_PERMANENT;
    file_save($image);
    file_usage_add($image, 'parallax_block', 'block', $form_values['delta']);
  }
}

/**
 * Function tests if any of the values are modified from the original value.
 */
function parallax_tutorial_updated_values($items, $form, $form_state) {
  foreach ($items as $key => $value) {
    if (isset($form_state['values'][$key])
        && ($form['settings']['parallax'][$key]['#default_value'] != $form_state['values'][$key])
        && user_access('administer blocks')) {
      return TRUE;
    }
  }
  return FALSE;
}
